{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/pages/physical-computing.js"],"names":["Bio","useStaticQuery","site","siteMetadata","author","social","style","display","marginBottom","name","summary","href","twitter","PhysicalComputing","data","location","siteTitle","title","posts","allMarkdownRemark","edges","margin","map","node","frontmatter","fields","slug","includes","key","className","to","date","dangerouslySetInnerHTML","__html","description","excerpt","Date","getFullYear","pageQuery"],"mappings":"6FAAA,qCA8CeA,IApCH,WACV,IADgB,EACHC,yBAAe,cAgBIC,KAAKC,aAA7BC,EAjBQ,EAiBRA,OAAQC,EAjBA,EAiBAA,OAChB,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAc,MAGhB,wCACY,gCAASJ,EAAOK,MAD5B,IAC4CL,EAAOM,QADnD,IAGE,uBAAGC,KAAI,uBAAyBN,EAAOO,SAAvC,gB,kCCtCR,0HAkDeC,UA3CW,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3BC,EAAYF,EAAKZ,KAAKC,aAAac,MACnCC,EAAQJ,EAAKK,kBAAkBC,MACrC,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,uBACX,kBAAC,IAAD,MACA,wBAAII,OAAO,QACVH,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KACpD,OAAIH,EAAKE,OAAOC,KAAKC,SAAS,uBAE1B,6BAASC,IAAKL,EAAKE,OAAOC,KAAMG,UAAU,QACxC,gCACE,wBACEvB,MAAO,CACLE,aAAc,EAAI,IAGpB,kBAAC,OAAD,CAAMsB,GAAIP,EAAKE,OAAOC,MAAOT,IAE/B,+BAAQM,EAAKC,YAAYO,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQV,EAAKC,YAAYU,aAAeX,EAAKY,aAOlD,QAET,wBAAId,OAAO,QACX,sCACK,IAAIe,MAAOC,iBAQf,IAAMC,EAAS","file":"component---src-pages-physical-computing-js-24ff33bbc7a7d32cba73.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: 2.5,\n      }}\n    >\n      <p>\n        a blog by <strong>{author.name}</strong> {author.summary}\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          twitter.\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nconst PhysicalComputing = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Physical Computing\" />\n      <Bio />\n      <hr margin=\"2px\"></hr>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        if( node.fields.slug.includes(\"/physical-computing\")){\n          return (\n            <article key={node.fields.slug} className=\"blog\">\n              <header>\n                <h3\n                  style={{\n                    marginBottom: 1 / 4,\n                  }}\n                >\n                  <Link to={node.fields.slug}>{title}</Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />\n              </section>\n            </article>\n          );\n        }\n        return null;\n      })}\n      <hr margin=\"2px\"></hr>\n      <footer>\n        Â© {new Date().getFullYear()}\n      </footer>\n    </Layout>\n  );\n};\n\nexport default PhysicalComputing;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}